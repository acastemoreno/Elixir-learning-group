#+TITLE: Programación funcional con Elixir
#+SUBTITLE: Elixir Learning Group - WiT Perú - 3era Sesión
#+DATE: 2017/10/21（Sabado）4:00pm
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 25.2.1
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: es
#+SELECT_TAGS: export

#+GITHUB: http://github.com/acastemoreno

#+FAVICON: images/elixir.png
#+ICON: images/elixir.png

** Tarea
#+BEGIN_SRC elixir
iex> fizzbuzz(15) #Multiplo de 5 y 3
"Fizzbuzz"
iex> fizzbuzz(6) #Multiplo de 3
"Fizz"
iex> fizzbuzz(10) #MUltiplo de 5
"Buzz"
iex> fizbuzz("Holi")
"Qué paso amiguito?"
#+END_SRC

* Recursión
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Implementación de Listas (Necesario tener claro como funcionan las listas)
Las listas en Elixir pueden ser vacias ó pares inmutables =head/tail=

donde el =head= contiene un valor y el =tail= es en si misma una lista

Ejemplos:
#+BEGIN_SRC elixir
iex> [ head | tail ] = [ 1, 2, 3 ] # => [1, 2, 3]
iex> head
1
iex> tail
[2, 3]
#+END_SRC

** Prepending en listas es =Rapido=
#+BEGIN_SRC elixir
iex> list1 = [1, 2, 3]
iex> list2 = [0 | list1]
#+END_SRC
#+BEGIN_CENTER
#+ATTR_HTML: :width 700px
[[file:images/prepending.png]]
#+END_CENTER

** Appending en listas es =Lento=
#+BEGIN_SRC elixir
iex> list1 = [1, 2, 3]
iex> list2 = list1 ++ [4]
#+END_SRC
#+BEGIN_CENTER
#+ATTR_HTML: :width 700px
[[file:images/appending.png]]
#+END_CENTER

** Insertar elementos es =Lento=
#+BEGIN_SRC elixir
iex> list1 = [1, 3, 4]
iex> list2 = List.insert_at(list1, 1, 2) # insertando 2 en la segunda posicion
iex> [1, 2, 3, 4]
#+END_SRC
#+BEGIN_CENTER
#+ATTR_HTML: :width 700px
[[file:images/insert_list.png]]
#+END_CENTER

** Implementación de Listas
- Elixir son pares head/tail
- Inmutabilidad hacen que sean eficientes en memoria
- Prepending es RAPIDO
- Appending es LENTO
- Insertando elementos puede ser lento
- Leer la lista entera puede ser lento

** Recursion
#+BEGIN_QUOTE
Recurrencia, recursión o recursividad es la forma en la cual se especifica un proceso basado en su propia definición.
  -- Wikipedia
#+END_QUOTE
#+BEGIN_QUOTE
De hecho, recursión es una de las ideas centrales de ciencia de computación. Resolver un problema mediante recursión significa que la solución depende de las soluciones de pequeñas instancias del mismo problema.
 -- Recursión (ciencias de computación) - Wikipedia
#+END_QUOTE


* Disminuye y conquista
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Disminuye y conquista
*Disminuye y conquista* es una tecnica para reducir un problema a su forma más simple y comenzar a resolverlo de forma incremental. AL hacer esto, encontramos la solución más obvia de una parte del problema. Apartir de ahí comenzamos a conquistar progresivamente, incrementando el problema paso a paso. Experimentemos calculando la longitud de una lista.

** Longitud de una lista
#+BEGIN_SRC elixir
#mi_lista.ex
defmodule MiLista do
  def longitud([]), do: 0
  def longitud([_]), do: 1+0
  def longitud([_,_]), do: 1+1+0
  def longitud([_,_,_]), do: 1+1+1+0
end

iex>MiLista.longitud([])
0
iex>MiLista.longitud(["1"])
1
iex>MiLista.longitud([1,2])
2
iex>MiLista.longitud([3,2,1,0])
Bug!!
#+END_SRC

** Partiendo de la solución más simple
#+BEGIN_SRC elixir
defmodule MiLista do
  def longitud([]), do: 0
  def longitud([_]), do: 1+longitud([])
  def longitud([_,_]), do: 1+longitud([_])
  def longitud([_,_,_]), do: 1+longitud([_,_])
end
# Ahora observamos que existe un patrón que empieza en la segunda defición de longitud.
# Habra manera de reducir paso por paso la longitud de cualquier lista ?
#+END_SRC

** Solución (añadiendo definición de error)
#+BEGIN_SRC elixir
defmodule MiLista do
  def longitud([]), do: 0
  def longitud([_ | tail]), do: 1+longitud(tail)
  def longitud(_), do: "Que paso amiguito?"
end
#+END_SRC

** Cool, pero que pasa si?
#+BEGIN_SRC elixir
iex>MiLista.longitud(1..1_000_000)
=1+longitud(2..1_000_000)
=1+(1+longitud(3..1_000_000))
=1+(1+(1+longitud(4..1_000_000)))
=1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(.......))))))))))
#+END_SRC
El consumo de memoria puede ocasionar el colapso total de nuestro sistema. *Stackoverflow*
** Arreglemos la función (Tail Call Optimization)
Para evitar *stackoverflow*, elixir nos aconseja que lo ultimo que hagamos en una función *recursiva* es ejecutar una función.
Pero en nuestro caso necesitamos que la función se llame a si misma al final de su ejecución.

#+BEGIN_SRC elixir
defmodule MiLista do
  def longitud([]), do: 0
  def longitud([_ | tail]), do: <b>longitud(tail)</b>
  def longitud(_), do: "Que paso amiguito?"
end
# Ahora necesitamos ir acumulando resultados parciales cada vez que se reduzca
# (esto nos obliga a crear un nuevo parametro que sirva como acumulador)
#+END_SRC
** 
#+BEGIN_SRC elixir
defmodule MiLista do
  def longitud([], <b>acc</b>), do: 0
  def longitud([_ | tail], <b>acc</b>), do: longitud(tail, <b>acc</b>)
  def longitud(_, _), do: "Que paso amiguito?"
end
#+END_SRC

#+BEGIN_SRC elixir
# Agregamos la suma con 1, y devolucion de aculumador en la caso más basico 
defmodule MiLista do
  def longitud([], acc), do: <b>acc</b>
  def longitud([_ | tail], acc), do: longitud(tail, <b>acc+1</b>)
  def longitud(_, _), do: "Que paso amiguito?"
end
iex> MiLista.longitud([],0) #0
iex> MiLista.longitud(["1"],0) #1
iex> MiLista.longitud(["1", "2"], 1) #3
#Error. Significa que siempre debemos tener cuidado de ingresar siempre 0
#como segundo parametro :/
#+END_SRC

** Que sea más facil de utilizar 
#+BEGIN_SRC elixir
# cambiamos la funcion para que sea privada y sea utilizada por otra función
defmodule MiLista do
  def longitud(lista) when lista |> is_list, do: <b>_</b>longitud(lista, 0)
  def longitud(_), do: "Que paso amiguito?"

  def<b>p _</b>longitud([], acc), do: acc
  def<b>p _</b>longitud([_ | tail], acc), do: <b>_</b>longitud(tail, acc+1)
end
#+END_SRC

** Más ejemplos
#+BEGIN_SRC elixir
iex> MiLista.suma([1,2,3,4,5,6])
21
iex> MiLista.maximo([4,2,16,9,10])
16
iex> MiLista.minimo([4,2,16,9,10])
2
iex> MiLista.map([1,2,3,4,5], &(&1*&1))
[1,4,9,16,25]
iex> MiLista.fibonacci([1,1], 7)
[1,1,2,3,5,8,13]
iex> MiLista.tribonacci([1,1,1], 7)
[1,1,1,3,5,9,17]
#+END_SRC

* Divide y conquista
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Currying (Pre-Debugging)
  :PROPERTIES:
  :ARTICLE: smaller
  :END:
#+BEGIN_QUOTE
"Chaining small functions in sequence" (rather than having a large function do a lot of stuff)

   -- Haskell Curry
#+END_QUOTE
#+BEGIN_CENTER
#+ATTR_HTML: :Width 250px
[[file:images/HaskellBCurry.jpg]]
#+END_CENTER

** Divide y conquista
*Divide y conquista* es una tecnica que trata sobre separar el problema en 2 o más partes. Por ejemplo, si tramos de obtener todo que necesitemos de una base de datos en un solo query, el query *select* sera dificil de escribir y mantener. En cambio si *dividimos* el query en querys pequeños e independientes el codigo se vuelve facil de programar y mantener.

** Ejemplo: Ordenar una lista (merge sort)
2 funciones:
- Si tenemos 2 listas ordenadas, se puede crear facilmente una lista ordenada de los elementos de ambas listas.
- Una lista grande puede ser separada en 2 listas más pequeñas. (Procesar listas de menor longitud es más facil)

** 1era función (merge)
#+BEGIN_SRC elixir
merge([<b>5</b>, 9], [<b>1</b>, 4, 5])
[1 | merge([<b>5</b>, 9], [<b>4</b>, 5])]
[1, 4 | merge([<b>5</b>, 9], [<b>5</b>])]
[1, 4, 5 | merge([<b>9</b>], [<b>5</b>])]
[1, 4, 5, 5 | merge([<b>9</b>], [])]
[1, 4, 5, 5, 9]
#+END_SRC

** 1era funcion (merge)
#+BEGIN_SRC elixir
defmodule Ordenar do
  defp merge([], lista_b), do: lista_b
  defp merge(lista_a, []), do: lista_a
  defp merge([head_a | tail_a], lista_b = [head_b | _]) when head_a <= head_b do
    [head_a | merge(tail_a, lista_b)]
  end
  defp merge(lista_a = [head_a | _], [head_b | tail_b]) when head_a > head_b do
    [head_b | merge(lista_a, tail_b)]
  end
end
#+END_SRC

** 2da funcion (ascendente)
#+BEGIN_SRC elixir
defmodule Ordenar do
  def ascendente([]), do: []
  def ascendente([a]), do: [a]
  def ascendente(lista) do
    mitad = div(Enum.count(lista), 2)
    {lista_a, lista_b} = Enum.split(lista, mitad)
    merge(
      ascendente(lista_a),
      ascentente(lista_b)
    )
  end
end
#+END_SRC
** Paso por paso
#+BEGIN_SRC elixir
ascendente([9,5,1,5,4])
merge(ascendente([9,5]), ascendente([1,5,4]))
merge(merge([9], [5]), merge(ascedente([1,5], [4])))
merge(merge([9], [5]), merge(merge([1], [5]), [4]))
merge([5, 9], merge([1, 5], [4]))
merge([5, 9], [1, 4, 5])
[1, 4, 5, 5, 9]
#+END_SRC
* Gracias ˊ・ω・ˋ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:
